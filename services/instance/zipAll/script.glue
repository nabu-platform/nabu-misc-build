[] files ?= null
[] projects ?= null

nabu.misc.build.services.server.configuration configuration ?= null

string cloudProfile ?= null
string cloudApiKey ?= null
string projectName ?= null
string environment ?= null

result = structure()

# add the projects unzipped (allows for hotfixes in prd)
for (project : projects)
	result = structure(result, lambda("repository/" + project/project): file.unzip(project/zip))
	
for (file : files)
	if (file/type == "module")
		result = structure(result, lambda("repository/" + replace("\.", "/", file/name) + ".nar"): file.read(file/uri))
	# currently we only install integrator
	else if (file/type == "application" && file/name ~ ".*integrator.*")
		result = structure(result, lambda("software/integrator"): file.unzip(file.read(file/uri)))

# tweak the server settings

# check if we have the cloud
hasCloud = size(files[type == "module" && name == "nabu.cloud"]) > 0

port = when(configuration/port != null, configuration/port, 5555)
serverGroup = when(configuration/serverGroup != null, configuration/serverGroup, projectName + "-" + environment)

integratorEntry = result["software/integrator"]

serverProperties = template("
	port=${port}
	repository=../../repository
	listenerPoolSize=20
	enableREST=true
	enableMaven=true
	localMavenServer=http://localhost:8080/
	group=${serverGroup}
	")
# inject cloud specific parameters
if (hasCloud)
	# with a tiny refactor of the cloud client, this is no longer necessary so we don't include it
	#		cepService=nabu.cloud.providers.eventHandler
	serverProperties = serverProperties + template("
		nabu.cloud.apiKey=${cloudApiKey}
		nabu.cloud.profile=${cloudProfile}
		")

if (configuration/dataPath != null)
	serverProperties = serverProperties + template("
		resources.alias.data=${configuration/dataPath}
		")

integratorEntry["hazelcast-amazon.xml"] = null
integratorEntry["hazelcast-fixed.xml"] = null
integratorEntry["hazelcast-multicast.xml"] = null

if (configuration/cluster != null)
	serverProperties = serverProperties + "
		cluster=hazelcast.xml"

if (configuration/cluster == "amazon")
	integratorEntry["hazelcast.xml"] = template('
		<hazelcast xmlns="http://www.hazelcast.com/schema/config">
			<network>
				<join>
					<multicast enabled="false"></multicast>
					<tcp-ip enabled="false"></tcp-ip>
					<aws enabled="true">
						<region>${when(configuration/amazonCluster/region == null, "eu-central-1", configuration/amazonCluster/region)}</region>
						<tag-key>${when(configuration/amazonCluster/tagKey == null, "cluster", configuration/amazonCluster/tagKey)}</tag-key>
						<tag-value>${when(configuration/amazonCluster/tagValue == null, serverGroup, configuration/amazonCluster/tagValue)}</tag-value>
					</aws>
				</join>
			</network>
		</hazelcast>')
		
else if (configuration/cluster == "fixed")
	integratorEntry["hazelcast.xml"] = template('
		<hazelcast xmlns="http://www.hazelcast.com/schema/config">
			<network>
				<join>
					<multicast enabled="false" />
					<tcp-ip enabled="true">
		${{
		for (ip : configuration/fixedCluster/ips)
			echo("				<member>" + ip + "</member>\\n")
		}}
					</tcp-ip>
				</join>
			</network>
		</hazelcast>')

else if (configuration/cluster == "multicast")
	integratorEntry["hazelcast.xml"] = template('
		<hazelcast xmlns="http://www.hazelcast.com/schema/config">
			<network>
				<join>
					<multicast enabled="true">
						<multicast-group>${when(configuration/multicastCluster/group == null, "224.2.2.3", configuration/multicastCluster/group)}</multicast-group>
						<multicast-port>${when(configuration/multicastCluster/port == null, "54327", configuration/multicastCluster/port)}</multicast-port>
						<multicast-time-to-live>${when(configuration/multicastCluster/timeToLive == null, "32", configuration/multicastCluster/timeToLive)}</multicast-time-to-live>
						<multicast-timeout-seconds>${when(configuration/multicastCluster/timeoutSeconds == null, "2", configuration/multicastCluster/timeoutSeconds)}</multicast-timeout-seconds>
		${{
		if (size(configuration/multicastCluster/trustedIps) > 0)
			echo("				<trusted-interfaces>\\n")
		for (ip : configuration/multicastCluster/trustedIps)
			echo("					<interface>" + ip + "</interface>\\n")
		if (size(configuration/multicastCluster/trustedIps) > 0)
			echo("				</trusted-interfaces>\\n")
		}}
					</multicast>
				</join>
			</network>
		</hazelcast>')


integratorEntry["server.properties"] = serverProperties

@return
bytes zip = file.zip(result)